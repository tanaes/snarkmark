rule function_gather_metaphlan2:
    input:
        expand(taxonomy_dir + "{sample}/metaphlan2/{sample}.profile.txt",
               sample=samples)
    output:
        touch(func_dir + "metaphlan2/gathered.done")
    threads:
        1
    params:
        out_dir = func_dir + "metaphlan2/gathered"
    run:
        os.makedirs(params.out_dir)
        for file in input:
            shell("cp {0} {1}/.".format(file, params.out_dir))

rule function_combine_metaphlan2:
    """
    Combines MetaPhlAn2 output for unified taxonomic profile for HUMAnN2.
    """
    input:
        rules.function_gather_metaphlan2.output
    output:
        joint_prof = func_dir + "metaphlan2/joined_taxonomic_profile.tsv",
        max_prof = func_dir + "metaphlan2/joined_taxonomic_profile_max.tsv"
    threads:
        1
    params:
        input_dir = func_dir + "metaphlan2/gathered"
    log:
        func_dir + "logs/function_combine_metaphlan.log"
    conda:
        "../envs/env_humann2.yaml"
    shell:
        """
        humann2_join_tables --input {params.input_dir} \
        --output {output.joint_prof} 2> {log} 1>&2

        humann2_reduce_table --input {output.joint_prof} \
        --output {output.max_prof} --function max \
        --sort-by level 2>> {log} 1>&2

        rm -r {params.input_dir}
        """

rule function_humann2:
    """
    Runs HUMAnN2 pipeline using general defaults.

    Other HUMAnN2 parameters can be specified as a quoted string in
    params: humann2: other.
    """
    input:
        forward = qc_dir + "{sample}/atropos_trimmed/{sample}.trimmed.R1.fastq.gz",
        reverse = qc_dir + "{sample}/atropos_trimmed/{sample}.trimmed.R2.fastq.gz",
        metaphlan_in = func_dir + "metaphlan2/joined_taxonomic_profile_max.tsv"
    output:
        touch(func_dir + "{sample}/humann2.done")
    params:
        nt_db = os.path.join(config['params']['db_dir'],
                            config['params']['humann2']["nt_db"]),
        aa_db = os.path.join(config['params']['db_dir'],
                             config['params']['humann2']["aa_db"]),
        mp2 = os.path.join(config['params']['db_dir'],
                          config['params']['metaphlan2']['db']),
        other = config['params']['humann2']['other'],
        temp_dir = lambda wildcards: os.path.join(config['tmp_dir_root'],
                                                 'tmp_%s' % wildcards.sample,
                                                 'function_humann2')
    threads:
        8
    log:
        func_dir + "logs/function_humann2.sample_{sample}.log"
    benchmark:
        "benchmarks/function/function_humann2.sample_{sample}.json"
    conda:
        "../envs/env_humann2.yaml"
    shell:
        """
        mkdir -p {params.temp_dir}
        zcat {input.forward} {input.reverse} > {params.temp_dir}/input.fastq

        humann2 --input {params.temp_dir}/input.fastq \
        --output {params.temp_dir}/{wildcards.sample} \
        --output-basename {wildcards.sample} \
        --nucleotide-database {params.nt_db} \
        --protein-database {params.aa_db} \
        --taxonomic-profile {input.metaphlan_in} \
        --o-log {log} \
        --threads {threads} \
        {params.other} 2> {log} 1>&2

        rm -r {params.temp_dir}
        """

rule humann2:
    input:
        lambda wildcards: expand(rules.function_humann2.output,
                                 sample=samples)


rule function:
    input:
        rules.humann2.input
